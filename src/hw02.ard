\import Data.Bool
\import Data.Or
\import Logic
\import hw01 (fac)
\import lect02 (++, List, nil, cons)

-- 1. Определите полиморфный tail для списков.
\data Maybe {A : \Type} | Nothing | Just A

\func tail {A : \Type} (lst : List A) : Maybe {List A}
  | nil => Nothing
  | cons _ lst => Just lst

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.
\func sort {A : \Type} (less : A -> A -> Bool) (lst : List A) : List A => help'sort (len lst) lst
  \where {
    \func id {A : \Type} (a : A) : A => a

    \func len {A : \Type} (lst : List A) : Nat
      | nil => 0
      | cons _ xs => suc (len xs)

    \func filterBy (a : A) (lst : List A) : \Sigma (List A) (List A) -> \Sigma (List A) (List A) \elim lst
      | nil => id
      | cons h xs => \lam (lt, gt) => if (less h a) (cons h lt, gt) (lt, cons h gt)

    \func help'sort (i : Nat) : List A -> List A \elim i
      | 0 => id
      | suc n => \lam lst => \case lst \with {
        | nil => nil
        | cons a xs => \case filterBy a xs (nil, nil) \with {
          | (lt,gt) => help'sort n lt ++ cons a (help'sort n gt)
        }
      }
  }

-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x and y) and z = x and (y and z) \elim x
  | false => idp
  | true => idp

\func ||-assoc (x y z : Bool) : (x or y) or z = x or (y or z) \elim x
  | false => idp
  | true => idp

-- 4. Докажите, что fac 3 равно 6.

\func fac3eq6 : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Or P Q) : R \elim h
  | inl a => f a
  | inr b => g b

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p _ => g p))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) : \Sigma P Q -> R => \lam (p, q) => f p q

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q : \Type} (f : Or P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P)
  => (\lam p => (f (inl p)).2, \lam q => (f (inr q)).1)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q
  => f (\lam _x => _x (\lam p => f (\lam _ => p)))

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam p => h (3, p)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type) (f : \Pi (x : Nat) -> P x -> Q x) (good : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x)
  => (good.1, f good.1 good.2)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (proof : \Pi (x : Nat) -> Or (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty
  => \lam p3 => \case proof 3 \with {
    | inl !p => \lam _ => !p p3
    | inr !q => !q
  }
